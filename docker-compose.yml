services:
  # API Gateway - handles HTTP requests and coordinates workflow
  api:
    build: ./services/api
    image: audiobook-api:latest
    ports:
      - "8000:8000"
    environment:
      API_KEY: "${API_KEY:-default-dev-key}"
      STORAGE_URL: "http://storage:8001"
      REDIS_URL: "redis://redis:6379"
    volumes:
      - segment_data:/data/ogg:ro  # Read-only access to serve audio chunks
    depends_on:
      - storage
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Centralized storage and metadata management
  storage:
    build: ./services/storage
    image: audiobook-storage:latest
    ports:
      - "8001:8001"
    environment:
      DATABASE_URL: "sqlite:///:memory:"
      TEXT_DATA_PATH: "/data/text"
      WAV_DATA_PATH: "/data/wav"
      SEGMENT_DATA_PATH: "/data/ogg"
    volumes:
      - text_data:/data/text
      - wav_data:/data/wav
      - segment_data:/data/ogg
      - meta_data:/data/meta
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Message broker for service coordination
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Text extraction service - triggered by API
  ingest:
    build: ./services/ingest
    image: audiobook-ingest:latest
    environment:
      STORAGE_URL: "http://storage:8001"
      REDIS_URL: "redis://redis:6379"
      QUEUE_NAME: "ingest_queue"
    volumes:
      - text_data:/data/text
    depends_on:
      - storage
      - redis
    restart: on-failure
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://storage:8001/health')"]
      interval: 60s
      timeout: 10s
      retries: 3

  # Text segmentation service - triggered by ingest completion
  segmenter:
    build: ./services/segmenter
    image: audiobook-segmenter:latest
    environment:
      STORAGE_URL: "http://storage:8001"
      REDIS_URL: "redis://redis:6379"
      QUEUE_NAME: "segment_queue"
      CHUNK_SIZE_CHARS: "800"
    volumes:
      - text_data:/data/text:ro
    depends_on:
      - storage
      - redis
    restart: on-failure
    healthcheck:
      test: ["CMD", "python", "-c", "import spacy; spacy.load('en_core_web_sm')"]
      interval: 60s
      timeout: 10s
      retries: 3

  # TTS processing service - triggered by segmentation completion
  #  tts-worker:
  #    build: ./services/tts-worker
  #    image: audiobook-tts:latest
  #    runtime: nvidia
  #    environment:
  #      NVIDIA_VISIBLE_DEVICES: all
  #      NVIDIA_DRIVER_CAPABILITIES: compute,utility
  #      STORAGE_URL: "http://storage:8001"
  #      REDIS_URL: "redis://redis:6379"
  #      QUEUE_NAME: "tts_queue"
  #      MODEL_PATH: "/models/fastpitch_hifigan"
  #    volumes:
  #      - wav_data:/data/wav
  #      - tts_models:/models
  #    depends_on:
  #      - storage
  #      - redis
  #    restart: on-failure
  #    healthcheck:
  #      test: ["CMD", "python", "-c", "import torch; print('GPU available:', torch.cuda.is_available())"]
  #      interval: 60s
  #      timeout: 10s
  #      retries: 3

  # Audio transcoding service - triggered by TTS completion
  transcoder:
    build: ./services/transcoder
    image: audiobook-transcoder:latest
    environment:
      STORAGE_URL: "http://storage:8001"
      REDIS_URL: "redis://redis:6379"
      QUEUE_NAME: "transcode_queue"
      SEGMENT_DURATION: "3.14"
      OPUS_BITRATE: "32k"
    volumes:
      - wav_data:/data/wav:ro
      - segment_data:/data/ogg
    depends_on:
      - storage
      - redis
    restart: on-failure
    healthcheck:
      test: ["CMD", "ffmpeg", "-version"]
      interval: 60s
      timeout: 10s
      retries: 3

  # React PWA Client
  #  client:
  #    build: ./pwa-client
  #    image: audiobook-client:latest
  #    ports:
  #      - "3000:3000"
  #    environment:
  #      API_BASE_URL: "http://localhost:8000"
  #    depends_on:
  #      - api
  #    restart: unless-stopped

volumes:
  text_data:
  wav_data:
  segment_data:
  meta_data:
  redis_data:
  tts_models:
