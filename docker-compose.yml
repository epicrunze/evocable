services:
  # API Gateway - handles HTTP requests and coordinates workflow
  api:
    build: ./services/api
    image: audiobook-api:latest
    expose:
      - "8000"  # Expose to internal network only
    environment:
      API_KEY: "${API_KEY}"
      STORAGE_URL: "http://storage:8001"
      REDIS_URL: "redis://redis:6379"
    volumes:
      - text_data:/data/text  # Shared text storage for processing pipeline
      - segment_data:/data/ogg:ro  # Read-only access to serve audio chunks
      - meta_data:/data/meta  # Database and metadata storage
    depends_on:
      - storage
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - evocable-network
      - default

  # Centralized storage and metadata management
  storage:
    build: ./services/storage
    image: audiobook-storage:latest
    user: root
    expose:
      - "8001"  # Expose to internal network only
    environment:
      DATABASE_URL: "sqlite:////data/meta/storage.db"
      TEXT_DATA_PATH: "/data/text"
      WAV_DATA_PATH: "/data/wav"
      SEGMENT_DATA_PATH: "/data/ogg"
    volumes:
      - text_data:/data/text
      - wav_data:/data/wav
      - segment_data:/data/ogg
      - meta_data:/data/meta
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - evocable-network
      - default

  # Message broker for service coordination
  redis:
    image: redis:7-alpine
    expose:
      - "6379"  # Expose to internal network only
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - evocable-network
      - default

  # Text extraction service - triggered by API
  ingest:
    build: ./services/ingest
    image: audiobook-ingest:latest
    environment:
      STORAGE_URL: "http://storage:8001"
      REDIS_URL: "redis://redis:6379"
      QUEUE_NAME: "ingest_queue"
    volumes:
      - text_data:/data/text
    depends_on:
      storage:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import asyncio; from main import TextExtractor; extractor = TextExtractor('http://storage:8001', 'redis://redis:6379'); print(asyncio.run(extractor.health_check()))"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Text segmentation service - triggered by ingest completion
  segmenter:
    build: ./services/segmenter
    image: audiobook-segmenter:latest
    environment:
      STORAGE_URL: "http://storage:8001"
      REDIS_URL: "redis://redis:6379"
      QUEUE_NAME: "segment_queue"
      CHUNK_SIZE_CHARS: "800"
    volumes:
      - text_data:/data/text:ro
    depends_on:
      storage:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import spacy; spacy.load('en_core_web_sm')"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

  # TTS processing service - triggered by segmentation completion
  tts-worker:
    build: ./services/tts-worker
    image: audiobook-tts:latest
    environment:
      STORAGE_URL: "http://storage:8001"
      REDIS_URL: "redis://redis:6379"
      QUEUE_NAME: "tts_queue"
      TTS_MODEL: "tts_models/en/ljspeech/tacotron2-DDC"
      WAV_DATA_PATH: "/data/wav"
    volumes:
      - text_data:/data/text:ro  # Read SSML chunks
      - wav_data:/data/wav       # Write WAV files
    depends_on:
      storage:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import torch; print('GPU available:', torch.cuda.is_available())"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

  # Audio transcoding service - triggered by TTS completion
  transcoder:
    build: ./services/transcoder
    image: audiobook-transcoder:latest
    environment:
      STORAGE_URL: "http://storage:8001"
      REDIS_URL: "redis://redis:6379"
      QUEUE_NAME: "transcode_queue"
      SEGMENT_DURATION: "3.14"
      OPUS_BITRATE: "32k"
    volumes:
      - wav_data:/data/wav:ro
      - segment_data:/data/ogg
    depends_on:
      storage:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "ffmpeg", "-version"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  text_data:
  wav_data:
  segment_data:
  meta_data:
  redis_data:
  tts_models:

networks:
  evocable-network:
    external: true
    name: evocable-network
