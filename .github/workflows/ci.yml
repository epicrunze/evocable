name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api, storage, ingest, segmenter, tts-worker, transcoder]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 isort mypy
      - name: Check code formatting
        run: |
          if [ -d "services/${{ matrix.service }}" ]; then
            black --check services/${{ matrix.service }}/
            isort --check-only services/${{ matrix.service }}/
          fi
      - name: Lint with flake8
        run: |
          if [ -d "services/${{ matrix.service }}" ]; then
            flake8 services/${{ matrix.service }}/
          fi
      - name: Type check with mypy
        run: |
          if [ -d "services/${{ matrix.service }}" ] && [ -f "services/${{ matrix.service }}/pyproject.toml" ]; then
            mypy services/${{ matrix.service }}/
          fi

  lint-client:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: pwa-client/package-lock.json
      - name: Install dependencies
        run: |
          cd pwa-client
          npm ci
      - name: Lint with ESLint
        run: |
          cd pwa-client
          npm run lint
      - name: Check formatting with Prettier
        run: |
          cd pwa-client
          npm run format:check

  test-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api, storage, ingest, segmenter, transcoder]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-asyncio
      - name: Run tests
        run: |
          if [ -d "services/${{ matrix.service }}" ]; then
            cd services/${{ matrix.service }}
            if [ -f "requirements.txt" ]; then
              pip install -r requirements.txt
            fi
            if [ -f "requirements-dev.txt" ]; then
              pip install -r requirements-dev.txt
            fi
            pytest --cov=. --cov-report=xml --cov-report=term-missing
          fi
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: services/${{ matrix.service }}/coverage.xml
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage

  test-client:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: pwa-client/package-lock.json
      - name: Install dependencies
        run: |
          cd pwa-client
          npm ci
      - name: Run tests
        run: |
          cd pwa-client
          npm test -- --coverage --watchAll=false
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: pwa-client/coverage/lcov.info
          flags: client
          name: client-coverage

  build-docker:
    runs-on: ubuntu-latest
    needs: [lint-python, lint-client, test-python, test-client]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build Docker images
        run: |
          docker compose build --parallel
      - name: Test Docker images
        run: |
          # Test that images can start without crashing
          docker compose up -d redis storage
          sleep 10
          docker compose logs storage
          docker compose down

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif' 