---
globs: docker-compose*,Dockerfile*,.env*,*.conf,setup-*.sh
alwaysApply: false
---
# Docker & Deployment Guide

## Docker Compose Architecture
The system uses [docker-compose.yml](mdc:docker-compose.yml) to orchestrate all services:

```yaml
# Core services pattern:
services:
  api:          # FastAPI gateway (port 8000)
  storage:      # SQLite + file management (port 8001)
  redis:        # Message broker (port 6379)
  ingest:       # Document processing
  segmenter:    # Text chunking
  tts-worker:   # GPU-accelerated TTS
  transcoder:   # Audio conversion
```

## Service Dependencies
Services have health checks and dependencies:
- **Storage + Redis**: Must be healthy before other services start
- **TTS-Worker**: Requires GPU access and CUDA drivers
- **Shared Volumes**: `/data/text`, `/data/wav`, `/data/ogg`, `/data/meta`

## Authentication System
The API uses a modern JWT-based authentication system with multiple authentication methods:

### Login Methods
- **Email/Password Login**: `POST /auth/login/email` - User authentication with email and password
- **API Key Login**: `POST /auth/login` - Legacy API key authentication (backward compatibility)

### Authentication Flow
```bash
# 1. Register a new user (email/password)
curl -X POST ${API_BASE_URL}/auth/register \
  -H "Content-Type: application/json" \
  -d '{
    "username": "testuser",
    "email": "test@example.com", 
    "password": "SecurePass123!",
    "confirm_password": "SecurePass123!"
  }'

# 2. Login to get session token
curl -X POST ${API_BASE_URL}/auth/login/email \
  -H "Content-Type: application/json" \
  -d '{
    "email": "test@example.com",
    "password": "SecurePass123!",
    "remember": false
  }'

# 3. Use session token for API calls
curl -X GET ${API_BASE_URL}/auth/profile \
  -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
```

### Security Features
- **JWT Session Tokens**: Secure, stateless authentication with configurable expiry
- **Password Strength Validation**: Enforces strong passwords with multiple character requirements
- **Token Refresh**: `POST /auth/refresh` endpoint for extending sessions
- **Password Reset**: Secure token-based password reset flow
- **User Profile Management**: Full CRUD operations for user accounts
- **Bearer Token Authentication**: Standard Authorization header with Bearer scheme

## Dockerfile Patterns
Each service follows this structure:
```dockerfile
FROM python:3.11-slim

# Install system dependencies
RUN apt-get update && apt-get install -y \
    required-packages \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . /app
WORKDIR /app

# Health check (uses internal container networking)
HEALTHCHECK --interval=30s --timeout=10s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:8000/health')"

CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
```

## Environment Configuration
Key environment variables:
```bash
# JWT Authentication (New Login-Based System)
SECRET_KEY=your-jwt-secret-key-change-in-production-256-bit
PASSWORD_RESET_EXPIRY=15  # Password reset token expiry in minutes (15 minutes)

# API Base URL (configurable for different environments)
API_BASE_URL=https://server.epicrunze.com  # Production

# Service URLs (Docker internal networking)
STORAGE_URL=http://storage:8001
REDIS_URL=redis://redis:6379

# Processing configuration
CHUNK_SIZE_CHARS=800
SEGMENT_DURATION=3.14
TTS_MODEL=tts_models/en/ljspeech/tacotron2-DDC
```

## Development Commands
```bash
# Start all services
docker-compose up -d

# Build and start (after code changes)
docker-compose up --build

# View logs from all services
docker-compose logs -f

# Service-specific operations
docker-compose exec api bash          # Enter API container
docker-compose logs -f tts-worker     # View TTS logs
docker-compose restart segmenter     # Restart specific service

# Authentication testing (requires running services and API_BASE_URL set)
# Set API base URL for testing
export API_BASE_URL=http://localhost:8000  # or your configured URL

# Test user registration
curl -X POST ${API_BASE_URL}/auth/register \
  -H "Content-Type: application/json" \
  -d '{"username":"testuser","email":"test@example.com","password":"SecurePass123!","confirm_password":"SecurePass123!"}'

# Test login and get session token
curl -X POST ${API_BASE_URL}/auth/login/email \
  -H "Content-Type: application/json" \
  -d '{"email":"test@example.com","password":"SecurePass123!"}'

# Test API access with Bearer token
curl -X GET ${API_BASE_URL}/auth/profile \
  -H "Authorization: Bearer YOUR_SESSION_TOKEN"

# Cleanup
docker-compose down                   # Stop services
docker-compose down -v               # Stop and remove volumes
```

## Volume Management
Shared volumes enable data flow between services:
- `text_data:/data/text` - Extracted document text
- `wav_data:/data/wav` - TTS-generated audio
- `segment_data:/data/ogg` - Transcoded streaming chunks
- `meta_data:/data/meta` - SQLite database and metadata

## Production Deployment
- Use production Docker Compose file with resource limits
- Set up reverse proxy with [nginx/](mdc:nginx/) configuration
- Configure log aggregation and monitoring
- Ensure GPU drivers installed on host for TTS service
- Set up backup strategy for persistent volumes

### Authentication Security for Production
- **SECRET_KEY**: Generate a cryptographically secure 256-bit key for JWT signing
  ```bash
  openssl rand -hex 32  # Generate secure secret key
  ```
- **Password Security**: Configure strong password requirements via environment variables
- **Token Expiry**: Set appropriate session token expiry times (default: 24 hours, remember: 30 days)
- **HTTPS Required**: All authentication endpoints must use HTTPS in production
- **Database Security**: Ensure user database (SQLite) is properly secured and backed up

### User Service Integration
The authentication system integrates with the Storage service for user management:
- **User Database**: SQLite database stores user accounts, profiles, and authentication data
- **Password Hashing**: Uses bcrypt with adaptive cost factor (12 rounds)
- **Service Communication**: API service communicates with Storage service at `http://storage:8001`
- **User Verification**: Email verification and password reset functionality
- **Profile Management**: Full user profile CRUD operations via Storage service

### Required Environment Variables for Production
```bash
# Critical security settings
SECRET_KEY=your-production-jwt-secret-key-256-bit
PASSWORD_RESET_EXPIRY=15  # 15 minutes

# API configuration
API_BASE_URL=https://api.yourdomain.com  # Production API URL

# Service integration
STORAGE_URL=http://storage:8001
REDIS_URL=redis://redis:6379
```
