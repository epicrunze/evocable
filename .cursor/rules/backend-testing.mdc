---
globs: tests/**/*.py,services/**/test_*.py
description: Backend testing patterns and practices
---

# Backend Testing Standards

## Test Structure
- **Main test suite**: [tests/test_api.py](mdc:tests/test_api.py) - Comprehensive API integration tests
- **Service tests**: Individual `test_*.py` files in each service directory
- **Test runner**: [tests/run_tests.py](mdc:tests/run_tests.py) - Orchestrates test execution

## Testing Patterns

### API Integration Tests
Test complete workflows through the API Gateway:
```python
import requests
import pytest

def test_complete_audiobook_workflow():
    # 1. Upload document
    response = requests.post("/api/v1/books", 
                           files={"file": ("test.txt", "Test content")},
                           headers={"Authorization": f"Bearer {API_KEY}"})
    book_id = response.json()["book_id"]
    
    # 2. Poll for completion
    while True:
        status = requests.get(f"/api/v1/books/{book_id}/status").json()
        if status["status"] == "completed":
            break
    
    # 3. Verify audio chunks available
    chunks = requests.get(f"/api/v1/books/{book_id}/chunks").json()
    assert len(chunks) > 0
```

### Service Unit Tests
Test individual service functionality:
```python
import asyncio
import pytest
from unittest.mock import AsyncMock, patch

@pytest.mark.asyncio
async def test_text_extraction():
    extractor = TextExtractor()
    
    # Mock file processing
    with patch('pdfplumber.open') as mock_pdf:
        mock_pdf.return_value.pages = [MockPage("Test content")]
        
        result = await extractor.extract_text("test.pdf")
        assert result.text == "Test content"
        assert result.status == "completed"
```

### Redis Queue Testing
Test inter-service messaging:
```python
import json
import pytest
from unittest.mock import AsyncMock

@pytest.mark.asyncio
async def test_queue_processing():
    mock_redis = AsyncMock()
    processor = QueueProcessor(mock_redis)
    
    # Mock queue message
    test_data = {"book_id": "123", "text": "Hello world"}
    mock_redis.brpop.return_value = ("queue", json.dumps(test_data))
    
    await processor.process_queue("test_queue")
    
    # Verify processing occurred
    mock_redis.brpop.assert_called_once()
```

## Test Execution
```bash
# Run all backend tests
cd tests/
python run_tests.py

# Run specific service tests
docker-compose exec api python -m pytest test_*.py -v

# Run with coverage
python -m pytest --cov=services/ tests/
```

## Test Environment
- Use Docker Compose for consistent test environment
- Mock external dependencies (GPU, file system)
- Test with sample documents of different formats
- Verify health checks and error handling
